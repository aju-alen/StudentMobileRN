// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
   url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}


model SuperAdmin {
  id                  String        @id @default(cuid())
  name                String
  email               String        @unique
  password            String
  verified            Boolean       @default(false)
  verificationToken   String?
  profileImage        String?
  userDescription     String        @default("No description provided")
  isTeacher           Boolean       @default(false)
  isAdmin             Boolean       @default(false)
  recommendedBoard    String?
  recommendedGrade    Int?
  hasSeenOnboarding   Boolean       @default(false)
  reccomendedSubjects Json @default("[]")     // Keeping original typo
  createdAt           DateTime      @default(now())
}
model User {
  id                  String        @id @default(cuid())
  name                String
  email               String        @unique
  password            String
  verified            Boolean       @default(false)
  verificationToken   String?
  profileImage        String?
  userDescription     String        @default("No description provided")
  isTeacher           Boolean       @default(false)
  isAdmin             Boolean       @default(false)
  recommendedBoard    String?
  recommendedGrade    Int?
  hasSeenOnboarding   Boolean       @default(false)
  reccomendedSubjects Json @default("[]")     // Keeping original typo
  subjects            Subject[]
  teacherBookings     Booking[]     @relation("TeacherBookings")
  studentBookings     Booking[]     @relation("StudentBookings")
  createdAt           DateTime      @default(now())
  
  // Relations
  reviews             Review[]
  sentConversations   Conversation[] @relation("UserConversations")
  clientConversations Conversation[] @relation("ClientConversations")
  communityMemberships CommunityUser[]
  communityMessages    CommunityMessage[]
  savedSubjects       SavedSubject[]
  reviewVotes         ReviewVote[]
  blockedTeachers     BlockedTeacher[] @relation("BlockingUser")
  blockedByTeachers   BlockedTeacher[] @relation("BlockedUser")
  reports             Report[]
  stripePurchases     StripePurchases[]
  userSubjects        UserSubject[]
}

model Subject {
  id                   String   @id @default(cuid())
  subjectName          String
  subjectNameSubHeading String
  subjectDuration      Int
  subjectSearchHeading String
  subjectDescription   String
  subjectPoints        Json @default("[]") 
  subjectImage         String
  subjectPrice         Float
  subjectBoard         String
  subjectLanguage      String
  subjectTags          Json @default("[]") 
  subjectGrade         Int      @default(10)
  subjectVerification  Boolean  @default(false)
  teacherVerification  Json @default("[]") 
  createdAt            DateTime @default(now())
  
  // Relations
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  reviews             Review[]
  conversations       Conversation[]
  bookings            Booking[]
  savedSubjects       SavedSubject[]
  reports             Report[]
  stripePurchases     StripePurchases[]
  userSubjects        UserSubject[]
  @@unique([id, userId])
}

model Review {
  id          String        @id @default(cuid())
  title       String
  description String
  createdAt   DateTime      @default(now())
  upvotes     Int          @default(0)
  downvotes   Int          @default(0)
  userId      String
  subjectId   String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  votes       ReviewVote[]

  @@index([userId])
  @@index([subjectId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  text           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  client    User     @relation("ClientConversations", fields: [clientId], references: [id], onDelete: Cascade)
  clientId  String
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String
  messages  ConversationMessage[]
}

model ConversationMessage {
  id             String       @id @default(cuid())
  senderId       String
  text           String
  messageId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
}

model Community {
  id                   String   @id @default(cuid())
  communityProfileImage String
  communityName        String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  users              CommunityUser[]
  messages           CommunityMessage[]
}

// Junction table for many-to-many relationship between User and Community
model CommunityUser {
  id          String    @id @default(cuid())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
}

model CommunityMessage {
  id          String    @id @default(cuid())
  text        String
  messageId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  sender      User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
}

model Booking {
  id String @id @default(cuid())
  subjectId String
  teacherId String
  studentId String

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher User @relation("TeacherBookings", fields: [teacherId], references: [id], onDelete: Cascade)
  student User @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)

  bookingDate DateTime
  bookingTime String
  bookingStatus BookingStatus @default(PENDING)
  bookingPrice Float
  bookingPaymentCompleted Boolean @default(false)
  bookingZoomUrl String? @default("")
  bookingZoomPassword String? @default("")
  bookingHours Int
  bookingMinutes Int
  bookingZoomId Int 
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripePurchase StripePurchases?
}

model SavedSubject {
  id String @id @default(cuid())
  subjectId String
  userId String
  
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([subjectId, userId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model ReviewVote {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  voteType  String   // 'up' or 'down'
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
}

model BlockedTeacher {
  id         String   @id @default(cuid())
  userId     String
  blockedTeacherId String
  createdAt  DateTime @default(now())

  user       User     @relation("BlockingUser", fields: [userId], references: [id], onDelete: Cascade)
  blockedTeacher User @relation("BlockedUser", fields: [blockedTeacherId], references: [id], onDelete: Cascade)

  @@unique([userId, blockedTeacherId])
}

enum ReportStatus {
  PENDING
  RESOLVED
}

model Report {
  id String @id @default(cuid())
  userId String
  subjectId String
  reportDescription String
  reportStatus ReportStatus @default(PENDING)
  reportResolution String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reportedSubject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model StripePurchases {
  id String @id @default(cuid())
  userId String
  subjectId String
  purchaseDate DateTime @default(now())
  purchaseStatus BookingStatus @default(PENDING)
  purchaseAmount Int
  purchaseCurrency String
  stripeCustomerId String
  purchaseReceiptUrl String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  booking Booking @relation(fields: [bookingId], references: [id])
  bookingId String @unique
}

model UserSubject{
  id String @id @default(cuid())
  userId String
  subjectId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId])
}